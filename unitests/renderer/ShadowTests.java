package renderer;

import static java.awt.Color.*;

import lighting.Ambientlight;
import org.junit.jupiter.api.Test;

import geometries.*;
import lighting.Ambientlight;
import lighting.SpotLight;
import primitives.*;
import renderer.*;
import scene.Scene;

/** Testing basic shadows
 * @author Dan */
public class ShadowTests {
    /** Scene of the tests */
    private final Scene          scene      = new Scene("Test scene");
    /** Camera builder of the tests */
    private final Camera.Builder camera = Camera.getBuilder()
            .setDirection(new Vector(0, 0, -1), new Vector(0, 1, 0))
            .setLocation(new Point(0, 0, 1000))
            .setVpDistance(1000)
            .setVpSize(2000, 2000)
            .setRayTracer(new SimpleRayTracer(scene));



    /** The sphere in the tests */
    private final Intersectable  sphere     = new Sphere(60d, new Point(0, 0, -200))
            .setEmission(new Color(BLUE))
            .setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(30));
    /** The material of the triangles in the tests */
    private final Material       trMaterial = new Material().setkD(0.5).setkS(0.5).setnShininess(30);

    /** Helper function for the tests in this module
     * @param pictName     the name of the picture generated by a test
     * @param triangle     the triangle in the test
     * @param spotLocation the spotlight location in the test */
    private void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {
        scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));
        scene.lights.add( //
                new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //
                        .setKl(1E-5).setKq(1.5E-7));
        camera.setImageWriter(new ImageWriter(pictName, 500, 500))

                .build()

                .renderImage(5)
                .writeToImage();

    }

    /** Produce a picture of a sphere and triangle with point light and shade */
    @Test
    public void sphereTriangleInitial() {
        sphereTriangleHelper("shadowSphereTriangleInitial", //
                new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                new Point(-100, -100, 200));
    }

    /** Sphere-Triangle shading - move triangle up-right */
    @Test
    public void sphereTriangleMove1()
    {
        sphereTriangleHelper("shadowSphereTriangleMove2", //
                new Triangle(new Point(-60, -30, 0), new Point(-30, -60, 0), new Point(-58, -58, -4)), //
                new Point(-100, -100, 200));
    }

    /** Sphere-Triangle shading - move triangle upper-righter */
    @Test
    public void sphereTriangleMove2()
    {
        sphereTriangleHelper("shadowSphereTriangleMove1", //
                new Triangle(new Point(-50, -20, 0), new Point(-20, -50, 0), new Point(-48, -48, -4)), //
                new Point(-100, -100, 200));
    }
    /** Sphere-Triangle shading - move spot closer */
    @Test
    public void sphereTriangleSpot1()
    {
        sphereTriangleHelper("shadowSphereTriangleSpot1", //
                new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                new Point(-85, -85, 120));
    }

    /** Sphere-Triangle shading - move spot even more close */
    @Test
    public void sphereTriangleSpot2()
    {
        sphereTriangleHelper("shadowSphereTriangleSpot2", //
                new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                new Point(-80, -80, 75));
    }

    /** Produce a picture of a two triangles lighted by a spot light with a Sphere
     * producing a shading */
    @Test
    public void trianglesSphere() {
        scene.geometries.add(
                new Triangle(new Point(-150, -150, -115), new Point(150, -150, -135),
                        new Point(75, 75, -150)) //
                        .setMaterial(new Material().setkS(0.8).setnShininess(60)), //
                new Triangle(new Point(-150, -150, -115), new Point(-70, 70, -140), new Point(75, 75, -150)) //
                        .setMaterial(new Material().setkS(0.8).setnShininess(60)), //
                new Sphere(30d, new Point(0, 0, -11)) //
                        .setEmission(new Color(BLUE)) //
                        .setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(30)) //
        );
        scene.setAmbientLight(new Ambientlight(new Color(WHITE), 0.15));
        scene.lights.add(
                new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4)) //
                        .setKl(4E-4).setKq(2E-5));

        camera.setImageWriter(new ImageWriter("shadowTrianglesSphere", 600, 600))
                .build()
                .renderImage()
                .writeToImage();
    }
    @Test
    public void sphereTriangleInitial_7() {
        scene.setAmbientLight(new Ambientlight(new Color(WHITE), 0.15));
        sphereTriangleHelper("shadowSphereTriangleInitial",
                new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)),
                new Point(-100, -100, 200));
    }


}
